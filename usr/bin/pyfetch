#!/usr/bin/env python3
#
# pyfetch [version 2020.11.8-1]
#
# pyfetch is a simple system information tool written in Python.
#
# Copyright 2020 TheCynicalTeam <wayne6324@gmail.com>
#
# ASCII art by TheCynicalTeam <wayne6324@gmail.com>
#
# Distributed under the terms of the GNU General Public License v3.
# See http://www.gnu.org/licenses/gpl.txt for the full license text.

# Import libraries

import os, sys, subprocess, optparse, re, linecache, datetime
import Xlib, Xlib.display, platform, GPUtil, gi, getopt
from subprocess import Popen, PIPE
from optparse import OptionParser
from getpass import getuser
from time import ctime, sleep 
gi.require_version('Gdk', '3.0')
gi.require_version('Gtk', '3.0')
from gi.repository import Gdk, Gtk, GObject, Gio, GLib

#---------------Output---------------#

output = [ 'Greeting', 'Dashes', 'User', 'Hostname', 'Distro', 'Kernel', 'Uptime', 'Packages', 'Shell', 'Resolution', 'DesktopEnvironment', 'WindowManager', 'Theme', 'Icons', 'Font', 'Terminal', 'CPU', 'GPU', 'RAM', 'Disk', 'Blank', 'Bar1', 'Bar2' ]
 
#---------------Dictionaries---------------#

colorDict = {
    'AIX': ['\x1b[0;32m', '\x1b[1;32m'],
    'Alpine': ['\x1b[0;34m', '\x1b[1;34m'],
    'Arch Linux': ['\x1b[0;34m', '\x1b[1;34m'],
    'Manjaro Linux': ['\x1b[0;32m', '\x1b[1;32m'],
    'Birthday': ['\x1b[0;34m', '\x1b[1;34m', '\x1b[0;31m', '\x1b[0;33m', '\x1b[0;32m', '\x1b[0;34m',],
    'Ubuntu': ['\x1b[0;31m', '\x1b[1;31m', '\x1b[0;33m'],
    'Debian': ['\x1b[0;31m', '\x1b[1;31m'],
    'Mint': ['\x1b[0;32m', '\x1b[1;37m'],
    'Crunchbang': ['\x1b[1;37m'],
    'Fedora': ['\x1b[0;34m', '\x1b[1;37m'],
    'Sensors': ['\x1b[0;31m', '\x1b[0;32m', '\x1b[0;33m'],
    'SensorsPercent': ['\x1b[0;31m', '\x1b[0;32m', '\x1b[0;33m'], 
    'Clear': ['\x1b[0m']
    }
    
deDict = {
    'cinnamon-sessio': 'Cinnamon',
    'gnome-session': 'GNOME',
    'mate-session': 'MATE',
    'ksmserver': 'KDE',
    'xfce4-session': 'Xfce',
    'lxsession': 'LXDE'
    }

wmDict = {
    'awesome': 'Awesome',
    'beryl': 'Beryl',
    'blackbox': 'Blackbox',
    'compiz': 'Compiz',
    'dwm': 'DWM',
    'enlightenment': 'Enlightenment',
    'herbstluftwm': 'herbstluftwm',
    'fluxbox': 'Fluxbox',
    'fvwm': 'FVWM',
    'i3': 'i3',
    'icewm': 'IceWM',
    'kwin': 'KWin',
    'metacity': 'Metacity',
    'musca': 'Musca',
    'nemo': 'Nemo',
    'openbox': 'Openbox',
    'pekwm': 'PekWM',
    'ratpoison': 'ratpoison',
    'scrotwm': 'ScrotWM',
    'wmaker': 'Window Maker',
    'wmfs': 'Wmfs',
    'wmii': 'wmii',
    'xfwm4': 'Xfwm',
    'xmonad': 'xmonad'
    }

logosDict = {
'AIX': '''{color[1]}
{color[1]}           `:+ssssossossss+-`                 {results[0]}
{color[1]}        .oys///oyhddddhyo///sy+.              {results[1]}
{color[1]}      /yo:+hNNNNNNNNNNNNNNNNh+:oy/            {results[2]}
{color[1]}    :h/:yNNNNNNNNNNNNNNNNNNNNNNy-+h:          {results[3]}
{color[1]}  `ys.yNNNNNNNNNNNNNNNNNNNNNNNNNNy.ys         {results[4]}
{color[1]} `h+-mNNNNNNNNNNNNNNNNNNNNNNNNNNNNm-oh        {results[5]}
{color[1]} h+-NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN.oy       {results[6]}
{color[1]}/d`mNNNNNNN/::mNNNd::m+:/dNNNo::dNNNd`m:      {results[7]}
{color[1]}h//NNNNNNN: . .NNNh  mNo  od. -dNNNNN:+y      {results[8]}
{color[1]}N.sNNNNNN+ -N/ -NNh  mNNd.   sNNNNNNNo-m      {results[9]}
{color[1]}N.sNNNNNs  +oo  /Nh  mNNs` ` /mNNNNNNo-m      {results[10]}
{color[1]}h//NNNNh  ossss` +h  md- .hm/ `sNNNNN:+y      {results[11]}
{color[1]}:d`mNNN+/yNNNNNd//y//h//oNNNNy//sNNNd`m-      {results[12]}
{color[1]} yo-NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNm.ss       {results[13]}
{color[1]} `h+-mNNNNNNNNNNNNNNNNNNNNNNNNNNNNm-oy        {results[14]}
{color[1]}   sy.yNNNNNNNNNNNNNNNNNNNNNNNNNNs.yo         {results[15]}
{color[1]}    :h+-yNNNNNNNNNNNNNNNNNNNNNNs-oh-          {results[16]} 
{color[1]}      :ys:/yNNNNNNNNNNNNNNNmy/:sy:            {results[17]}
{color[1]}        .+ys///osyhhhhys+///sy+.              {results[18]}
{color[1]}            -/osssossossso/-                  {results[19]}
{color[1]}                                              {results[20]}
{color[1]}                                              {results[21]}
\x1b[0m''',
'Alpine': '''{color[1]}
{color[1]}       .hddddddddddddddddddddddh.             {results[1]}
{color[1]}      :dddddddddddddddddddddddddd:            {results[2]}
{color[1]}     /dddddddddddddddddddddddddddd/           {results[3]}
{color[1]}    +dddddddddddddddddddddddddddddd+          {results[4]}
{color[1]}  `sdddddddddddddddddddddddddddddddds`        {results[5]}
{color[1]} `ydddddddddddd++hdddddddddddddddddddy`       {results[6]}
{color[1]}.hddddddddddd+`  `+ddddh:-sdddddddddddh.      {results[7]}
{color[1]}hdddddddddd+`      `+y:    .sddddddddddh      {results[8]}
{color[1]}ddddddddh+`   `//`   `.`     -sddddddddd      {results[9]}
{color[1]}ddddddh+`   `/hddh/`   `:s-    -sddddddd      {results[10]}
{color[1]}ddddh+`   `/+/dddddh/`   `+s-    -sddddd      {results[11]}
{color[1]}ddd+`   `/o` :dddddddh/`   `oy-    .yddd      {results[12]}
{color[1]}hdddyo+ohddyosdddddddddho+oydddy++ohdddh      {results[13]}
{color[1]}.hddddddddddddddddddddddddddddddddddddh.      {results[14]}
{color[1]} `yddddddddddddddddddddddddddddddddddy`       {results[15]}
{color[1]}  `sdddddddddddddddddddddddddddddddds`        {results[16]}
{color[1]}    +dddddddddddddddddddddddddddddd+          {results[17]}
{color[1]}     /dddddddddddddddddddddddddddd/           {results[18]}
{color[1]}      :dddddddddddddddddddddddddd:            {results[19]}
{color[1]}       .hddddddddddddddddddddddh.             {results[20]}
{color[1]}                                              {results[21]}
\x1b[0m''',
'Arch Linux': '''{color[1]}
{color[1]}               +                {results[0]}
{color[1]}               #                {results[1]}
{color[1]}              ###               {results[2]}
{color[1]}             #####              {results[3]}
{color[1]}             ######             {results[4]}
{color[1]}            ; #####;            {results[5]}
{color[1]}           +##.#####            {results[6]}
{color[1]}          +##########           {results[7]}
{color[1]}         ######{color[0]}#####{color[1]}##;         {results[8]}
{color[1]}        ###{color[0]}############{color[1]}+        {results[9]}
{color[1]}       #{color[0]}######   #######        {results[10]}
{color[0]}     .######;     ;###;`\".      {results[11]}
{color[0]}    .#######;     ;#####.       {results[12]}
{color[0]}    #########.   .########`     {results[13]}
{color[0]}   ######'           '######    {results[14]}
{color[0]}  ;####                 ####;   {results[15]}
{color[0]}  ##'                     '##   {results[16]} 
{color[0]} #'                         `#  {results[17]}
{color[0]}                                {results[18]}
{color[0]}                                {results[19]}
{color[0]}                                {results[20]}
{color[0]}                                {results[21]}
\x1b[0m''',
'Manjaro Linux': '''{color[1]}
{color[1]}  ██████████████████  ████████  {results[0]}
{color[1]}  ██████████████████  ████████  {results[1]}
{color[1]}  ██████████████████  ████████  {results[2]}
{color[1]}  ██████████████████  ████████  {results[3]}
{color[1]}  ████████            ████████  {results[4]}
{color[1]}  ████████  {color[0]}████████  {color[1]}████████  {results[5]}
{color[1]}  ████████  {color[0]}████████  {color[1]}████████  {results[6]}
{color[1]}  ████████  {color[0]}████████  {color[1]}████████  {results[7]}
{color[1]}  ████████  {color[0]}████████  {color[1]}████████  {results[8]}
{color[1]}  ████████  {color[0]}████████  {color[1]}████████  {results[9]}
{color[1]}  ████████  {color[0]}████████  {color[1]}████████  {results[10]}
{color[1]}  ████████  {color[0]}████████  {color[1]}████████  {results[11]}
{color[1]}  ████████  {color[0]}████████  {color[1]}████████  {results[12]}
{color[1]}                                {results[13]}
{color[1]}                                {results[14]}
{color[1]}                                {results[15]}
{color[1]}                                {results[16]}
{color[1]}                                {results[17]}
{color[1]}                                {results[18]}
{color[1]}                                {results[19]}
{color[1]}                                {results[20]}
{color[1]}                                {results[21]}                                
\x1b[0m''', 
'Birthday': '''{color[1]}
{color[2]}██{color[3]}╗  {color[2]}██{color[3]}╗ {color[2]}█████{color[3]}╗ {color[2]}██████{color[3]}╗ {color[2]}██████{color[3]}╗ {color[2]}██{color[3]}╗   {color[2]}██{color[3]}╗                                           {results[0]}
{color[2]}██{color[3]}║  {color[2]}██{color[3]}║{color[2]}██{color[3]}╔══{color[2]}██{color[3]}╗{color[2]}██{color[3]}╔══{color[2]}██{color[3]}╗{color[2]}██{color[3]}╔══{color[2]}██{color[3]}╗╚{color[2]}██{color[3]}╗ {color[2]}██{color[3]}╔╝                                           {results[1]}
{color[2]}███████{color[3]}║{color[2]}███████{color[3]}║{color[2]}██████{color[3]}╔╝{color[2]}██████{color[3]}╔╝ {color[3]}╚{color[2]}████{color[3]}╔╝                                            {results[2]}
{color[2]}██{color[3]}╔══{color[2]}██{color[3]}║{color[2]}██{color[3]}╔══{color[2]}██{color[3]}║{color[2]}██{color[3]}╔═══╝ {color[2]}██{color[3]}╔═══╝   {color[3]}╚{color[2]}██{color[3]}╔╝                                             {results[3]}
{color[2]}██{color[3]}║  {color[2]}██{color[3]}║{color[2]}██{color[3]}║  {color[2]}██{color[3]}║{color[2]}██{color[3]}║     {color[2]}██{color[3]}║        {color[2]}██{color[3]}║                                              {results[4]}
{color[3]}╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝        ╚═╝                                              {results[5]}
                                                                                    {results[6]}
                 {color[4]}██████{color[5]}╗ {color[4]}██{color[5]}╗{color[4]}██████{color[5]}╗ {color[4]}████████{color[5]}╗{color[4]}██{color[5]}╗  {color[4]}██{color[5]}╗{color[4]}██████{color[5]}╗  {color[4]}█████{color[5]}╗ {color[4]}██{color[5]}╗   {color[4]}██{color[5]}╗      {results[7]}
                 {color[4]}██{color[5]}╔══{color[4]}██{color[5]}╗{color[4]}██{color[5]}║{color[4]}██{color[5]}╔══{color[4]}██{color[5]}╗╚══{color[4]}██{color[5]}╔══╝{color[4]}██{color[5]}║  {color[4]}██{color[5]}║{color[4]}██{color[5]}╔══{color[4]}██{color[5]}╗{color[4]}██{color[5]}╔══{color[4]}██{color[5]}╗╚{color[4]}██{color[5]}╗ {color[4]}██{color[5]}╔╝      {results[8]}
                 {color[4]}██████{color[5]}╔╝{color[4]}██{color[5]}║{color[4]}██████{color[5]}╔╝   {color[4]}██{color[5]}║   {color[4]}███████{color[5]}║{color[4]}██{color[5]}║  {color[4]}██{color[5]}║{color[4]}███████{color[5]}║ ╚{color[4]}████{color[5]}╔╝       {results[9]}
                 {color[4]}██{color[5]}╔══{color[4]}██{color[5]}╗{color[4]}██{color[5]}║{color[4]}██{color[5]}╔══{color[4]}██{color[5]}╗   {color[4]}██{color[5]}║   {color[4]}██{color[5]}╔══{color[4]}██{color[5]}║{color[4]}██{color[5]}║  {color[4]}██{color[5]}║{color[4]}██{color[5]}╔══{color[4]}██{color[5]}║  ╚{color[4]}██{color[5]}╔╝        {results[10]}
                 {color[4]}██████{color[5]}╔╝{color[4]}██{color[5]}║{color[4]}██{color[5]}║  {color[4]}██{color[5]}║   {color[4]}██{color[5]}║   {color[4]}██{color[5]}║  {color[4]}██{color[5]}║{color[4]}██████{color[5]}╔╝{color[4]}██{color[5]}║  {color[4]}██{color[5]}║   {color[4]}██{color[5]}║         {results[11]}
                 {color[5]}╚═════╝ ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚═════╝ ╚═╝  ╚═╝   ╚═╝         {results[12]}
                                                                                    {results[13]}
                                                                                    {results[14]}
                                                                                    {results[15]}
                                                                                    {results[16]}
                                                                                    {results[17]}
                                                                                    {results[18]}
                                                                                    {results[19]}
                                                                                    {results[20]}
                                                                                    {results[21]}  
\x1b[0m''', 
}

version = '2020.11.08'
processes = str(subprocess.check_output(('ps', '-u', getuser(), '-o', 'comm','--no-headers')), encoding='utf8').rstrip('\n').split('\n')
#--------------Function---------------#

def time_of_Day(Hour, Day, Month):
    if (Day == 16) and (Month == 6):
        return 'Happy Birthday'
    elif (Hour > 4) and (Hour <= 8):
        return 'Good early morning'
    elif (Hour > 8) and (Hour <= 12 ):
        return 'Good morning'
    elif (Hour > 12) and (Hour <= 16):
        return'Good afternoon'
    elif (Hour > 16) and (Hour <= 20) :
        return 'Good evening'
    elif (Hour > 20) and (Hour <= 24):
        return'Good night'
    elif (Hour <= 4):
        return'late night'

def get_Screens():
    Gdk.init([])
    display = Gdk.Display.get_default()
    monitors = [display.get_monitor(i) for i in range(display.get_n_monitors())]
    list_screens = []
    for mon in monitors:
        geo = mon.props.geometry
        rr = mon.props.refresh_rate / 1000
        list_screens.append(f"{geo.width}x{geo.height} @ {rr} Hz")
    return ', '.join(list_screens)

#---------------Classes---------------#
class Output:
    results = []
    results.extend(['']*(18-len(output)))
    
    def __init__(self):
        self.now = datetime.datetime.now()
        self.distro = self.__detectDistro()
        
    def __detectDistro(self):
        Day = self.now.day
        Month = self.now.month
        if len(sys.argv[1:]) >= 1:
            try:
                opts, args = getopt.getopt(sys.argv[1:],"hbdv",["help","birthday","distro","version"])
            except getopt.GetoptError:
                print ('For help try pyfetch -h')
                sys.exit(2)
            for opt, arg in opts:
                if opt in ("-h", "--help"):
                    print ('pyfetch -b [day/month]      #Sets the day and month for your birthday.')
                    print ('pyfetch -d [distro]         #Test the look of a distro of chose.')
                    sys.exit()
                elif opt in ("-b", "--birthday"):
                    try:
                        date = args[0].split("/")
                        if len(date) == 2:
                            if (Day == int(date[0])) and (Month == int(date[1])):
                                return 'Birthday'
                            elif os.path.exists('/etc/lsb-release'):
                                distro = subprocess.check_output(['lsb_release', '-d']).decode('utf-8').strip('Description:')[1:-1]
                                if distro in logosDict:
                                    return distro
                                else:
                                    print (f'Sorry {distro} is not supported')
                                    sys.exit(2)
                            else:
                                sys.exit(1)
                        else:
                            if (Day == 16) and (Month == 6):
                                return 'Birthday'
                            elif os.path.exists('/etc/lsb-release'):
                                distro = subprocess.check_output(['lsb_release', '-d']).decode('utf-8').strip('Description:')[1:-1]
                                if distro in logosDict:
                                    return distro
                                else:
                                    print (f'Sorry {distro} is not supported')
                                    sys.exit(2)
                            else:
                                sys.exit(1)
                    except IndexError:
                        print ('For help try pyfetch -h')
                        sys.exit(2)
                elif opt in ("-d", "--distro"):
                    separator = ' '
                    distro = separator.join(args)
                    if distro in logosDict:
                        return distro
                    else:
                        print (f'Sorry {distro} is not supported')
                        sys.exit(2)
                elif opt in ("-v", "--version"):
                    print (f'pyfetch  version {version}')
                    sys.exit()

        else:
            if (Day == 16) and (Month == 6):
                return 'Birthday'
            elif os.path.exists('/etc/lsb-release'):
                distro = subprocess.check_output(['lsb_release', '-d']).decode('utf-8').strip('Description:')[1:-1]
                if distro in logosDict:
                    return distro
                else:
                    print (f'Sorry {distro} is not supported')
                    sys.exit(2)
            else:
                sys.exit(1)
        
            
    def append(self, display):
        if display.key == 'Greeting' or display.key == 'Dashes' or display.key == 'Blank':
            self.results.append('%s%s' % (colorDict[self.distro][1], display.value))
        elif display.key == 'Bar1' or display.key == 'Bar2':
            self.results.append('%s%s' % (colorDict[self.distro][1], display.value))
        else:
            self.results.append('%s%s: %s%s' % (colorDict[self.distro][1], display.key, colorDict['Clear'][0], display.value))
        
    def output(self):
        print(logosDict[self.distro].format(color = colorDict[self.distro], results = self.results))

class Greeting:
    def __init__(self):
        self.now = datetime.datetime.now()
        self.key = 'Greeting'
        self.value = time_of_Day(self.now.hour, self.now.day, self.now.month) + ', ' +os.getenv('USER') + '!'

class Dashes:
    def __init__(self):
        self.key = 'Dashes'
        self.value = '-----------------'

class User:
    def __init__(self):
        self.key = 'User'
        self.value = os.getenv('USER')

class Hostname:
    def __init__(self):
        hostname = Popen(['uname', '-n'], stdout=PIPE).communicate()[0].decode('Utf-8').rstrip('\n')
        self.key = 'Hostname'
        self.value = hostname
            
class Distro:
    def __init__(self):
        if os.path.exists('/etc/lsb-release'):
            distro =  subprocess.check_output(['lsb_release', '-d']).decode('utf-8').strip('Description:')[1:-1]
            arch = platform.machine()
        self.key = 'Distro'
        self.value = distro + f' ({arch})'
            
class Kernel:
    def __init__(self):
        kernel = Popen(['uname', '-r'], stdout=PIPE).communicate()[0].decode('Utf-8').rstrip('\n')
        self.key = 'Kernel'
        self.value = kernel
            
class Uptime:		
    def __init__(self):
        uptime = subprocess.check_output(['uptime', '-p']).decode('utf-8')[0:-1];
        self.key = 'Uptime'
        self.value = uptime
    
class WindowManager:
    def __init__(self):
        wm = ''
        for key in wmDict.keys():
            if key in processes:
                wm = wmDict[key]
                break
            if wm == "":
                for key in deDict.keys():
                    if key in processes:
                        wm = deDict[key]
                        break
                    
        self.key = 'WM'
        self.value = wm
            
class DesktopEnvironment:
    def __init__(self):
        de = ''
        for key in deDict.keys():
            if key in processes:
                de = deDict[key]
                break
            if de == "":
                for key in wmDict.keys():
                    if key in processes:
                        de = wmDict[key]
                        break
                    
        self.key = 'DE'
        self.value = de

class Font:
    def __init__(self):
        settings = Gtk.Settings.get_default()
        self.key = 'Font'
        self.value = settings.get_property('gtk-font-name')
            
class Shell:
    def __init__(self):
        self.key = 'Shell'
        self.value = os.getenv('SHELL')

class Resolution:
    def __init__(self):
        self.key = 'Resolution'
        self.value = get_Screens()
            
class Terminal:
    def __init__(self):
        disp = Xlib.display.Display()
        window = disp.get_input_focus().focus
        self.key = 'Terminal'
        self.value = window.get_wm_class()[1]
            
class Packages:
    def __init__(self):
        pacman = Popen(['pacman', '-Qqetn'], stdout=PIPE).communicate()[0].decode("Utf-8")
        ppackages = str(len(pacman.rstrip('\n').split('\n')))
        aur = Popen(['pacman', '-Qqetm'], stdout=PIPE).communicate()[0].decode("Utf-8")
        apackages = str(len(aur.rstrip('\n').split('\n')))
        self.key = 'Packages'
        self.value = ppackages + ' (Pacman) ' + apackages + ' (AUR)'
        
class CPU:
    def __init__(self):
        file = open('/proc/cpuinfo').readlines()
        cpuinfo = re.sub('  +', ' ', file[4].replace('model name\t: ', '').rstrip('\n'))
        self.key = 'CPU'
        self.value = cpuinfo
    
class GPU:
    def __init__(self):
        gpus = GPUtil.getGPUs()
        list_gpus = []
        for gpu in gpus:
            # name of GPU
            gpu_name = gpu.name            
            list_gpus.append((gpu_name))

        self.key = 'GPU'
        self.value = ', '.join(list_gpus)

class RAM:
    def __init__(self):
        raminfo = Popen(['free', '-m'], stdout=PIPE).communicate()[0].decode('Utf-8').split('\n')
        ram = ''.join(filter(re.compile('M').search, raminfo)).split()
        used = int(ram[2]) + int(ram[4])
        usedpercent = ((float(used) / float(ram[1])) * 100)
        if usedpercent <= 33:
            ramdisplay = '%s%s MB %s/ %s MB %s%s' % (colorDict['Sensors'][1], used, colorDict['Clear'][0], ram[1], colorDict['SensorsPercent'][1], f'{int(usedpercent)}%')
        if usedpercent > 33 and usedpercent < 67:
            ramdisplay = '%s%s MB %s/ %s MB %s%s ' % (colorDict['Sensors'][2], used, colorDict['Clear'][0], ram[1], colorDict['SensorsPercent'][2], f'{int(usedpercent)}%')
        if usedpercent >= 67:
            ramdisplay = '%s%s MB %s/ %s MB %s%s' % (colorDict['Sensors'][0], used, colorDict['Clear'][0], ram[1], colorDict['SensorsPercent'][0], f'{int(usedpercent)}%')
        self.key = 'RAM'
        self.value = ramdisplay
            
class Disk:
    def __init__(self):
        p1 = Popen(['df', '-Tlh', '--total', '-t', 'ext4', '-t', 'ext3', '-t', 'ext2', '-t', 'reiserfs', '-t', 'jfs', '-t', 'ntfs', '-t', 'fat32', '-t', 'btrfs', '-t', 'fuseblk', '-t', 'xfs'], stdout=PIPE).communicate()[0].decode("Utf-8")
        total = p1.splitlines()[-1]
        used = total.split()[3]
        size = total.split()[2]
        usedpercent = float(total.split()[5][:-1])
        
        if usedpercent <= 33:
            disk = '%s%s %s/ %s' % (colorDict['Sensors'][1], used, colorDict['Clear'][0], size)  
        if usedpercent > 33 and usedpercent < 67:  
            disk = '%s%s %s/ %s' % (colorDict['Sensors'][2], used, colorDict['Clear'][0], size)  
        if usedpercent >= 67:
            disk = '%s%s %s/ %s' % (colorDict['Sensors'][0], used, colorDict['Clear'][0], size)  
        self.key = 'Disk'
        self.value = disk

class Theme:
    def __init__(self):
        self.key = 'Theme'
        self.value = Gtk.Settings.get_default().get_property("gtk-theme-name")

class Icons:
    def __init__(self):
        self.key = 'Icons'
        self.value = Gtk.Settings.get_default().get_property("gtk-icon-theme-name")

class Blank:
    def __init__(self):
        self.key = 'Blank'
        self.value = ' '

class Bar1:
    def __init__(self):
        COLORS_BAR1 = u'  ';
        for i in range(40, 50):   COLORS_BAR1 += f"\033[{i}m   \033[00m";
        self.key = 'Bar1'
        self.value = COLORS_BAR1

class Bar2:
    def __init__(self):
        COLORS_BAR2 = u'  ';
        for i in range(100, 140): COLORS_BAR2 += f"\033[{i}m   \033[00m";
        self.key = 'Bar2'
        self.value = COLORS_BAR2

classes = {
 'Greeting': Greeting,
 'Dashes': Dashes,
 'User': User,
 'Hostname': Hostname,
 'Distro': Distro,
 'Kernel': Kernel,
 'Uptime': Uptime,
 'Packages': Packages,
 'Shell': Shell,
 'Resolution': Resolution,
 'DesktopEnvironment': DesktopEnvironment,
 'WindowManager': WindowManager,
 'Theme': Theme,
 'Icons': Icons,
 'Font': Font,
 'Terminal': Terminal,
 'CPU': CPU,
 'GPU': GPU,
 'RAM': RAM,
 'Disk': Disk,
 'Blank': Blank,
 'Bar1': Bar1,
 'Bar2': Bar2
 }

if __name__ == '__main__':
    subprocess.call(('setterm', '-linewrap', 'off'))
    out = Output()
    for x in output:
        out.append(classes[x]())
    out.output()
